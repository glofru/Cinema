<?php


/**
 * Nella classe Token sono presenti tutti i metodi e gli attributi necessari alla creazione e gestione di un token. un token viene istanziato nel momento in cui un utente necessita di un cambio della password. Questo in modo tale che solo lui possa accedere alla pagina di modifica della password in quanto solo lui dovrbebe possedere il valore del token.
 * Class EToken
 * @access public
 * @author Lofrumento - Di Santo - Susanna
 * @package Model
 */
class EToken
{
    /**
     * Valore del token.
     * @var string
     */
    private string $value;
    /**
     * Data di creazione del token.
     * @var DateTime
     */
    private DateTime $creationDate;
    /**
     * Utente al quale appartiene il token.
     * @var EUtente
     */
    private EUtente $utente;

    /**
     * EToken constructor.
     * @param string $value, valore del token.
     * @param DateTime $creationDate, data di creazione del token.
     * @param EUtente $utente, utente a cui appartiene il token.
     */
    public function __construct(string $value, DateTime $creationDate, EUtente $utente) {
        $this->setValue($value);
        $this->setCreationDate($creationDate);
        $this->setUtente($utente);
    }


    /**
     * @return string, valore del token.
     */
    public function getValue(): string {
        return $this->value;
    }

    /**
     * @param string $value, valore del token (un uid).
     */
    public function setValue(string $value): void {
        $this->value = $value;
    }

    /**
     * @return DateTime, data di creazione del token.
     */
    public function getCreationDate(): DateTime {
        return $this->creationDate;
    }

    /**
     * @return string, data di creazione nel formato oppurtuno per essere slavato sul DB.
     */
    public function getCreationdateDB(): string {
        return $this->getCreationDate()->format('Y-m-d');
    }

    /**
     * @return string, ora di creazione del token riportata nel formato ora:minuti:secondi.
     */
    public function getCreationHour(): string {
        return $this->getCreationDate()->format('H:i:s');
    }

    /**
     * @param DateTime $creationDate, data di creazione del token.
     */
    public function setCreationDate(DateTime $creationDate): void {
        $this->creationDate = $creationDate;
    }

    /**
     * @return EUtente, utente al quale appartiene il token.
     */
    public function getUtente(): EUtente {
        return $this->utente;
    }

    /**
     * @param EUtente $utente, utente al quale appartiene il token.
     */
    public function setUtente(EUtente $utente): void {
        $this->utente = $utente;
    }

    /**
     * @return string
     */
    public function __toString(): string {
        return "Value: " . $this->getValue() . ", isUsed: " . $this->amIValid()?"true":"false";
    }

    /**
     * Funzione che controlla se il token sia ancora valido (ovvero che sia stato 'invocato' entro un'ora dalla sua creazione).
     * @return bool, esito del controllo.
     */
    public function amIValid(): bool {
        $maybeExpired = new DateTime('now -1 Hour');

        return $this->getCreationDate() >= $maybeExpired;
    }
}
